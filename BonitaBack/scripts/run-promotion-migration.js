/**
 * Script para ejecutar SOLO la migraci√≥n de promociones
 * Uso: node scripts/run-promotion-migration.js
 */

const path = require('path');
const { conn: sequelize } = require('../src/data');

async function runPromotionMigration() {
  console.log('üéâ [PROMO] Iniciando migraci√≥n de tabla promotions...');
  
  try {
    // ‚úÖ 1. Verificar conexi√≥n
    await sequelize.authenticate();
    console.log('‚úÖ [DB] Conexi√≥n establecida');
    
    // ‚úÖ 2. Crear tabla de migraciones si no existe
    await sequelize.query(`
      CREATE TABLE IF NOT EXISTS "SequelizeMeta" (
        name VARCHAR(255) PRIMARY KEY
      );
    `);
    
    console.log('‚úÖ [MIGRATOR] Tabla SequelizeMeta lista');
    
    // ‚úÖ 3. Definir nombre de la migraci√≥n
    const migrationName = '007-create-promotions-table';
    const migrationFile = `${migrationName}.js`;
    const migrationPath = path.join(__dirname, '../migrations', migrationFile);
    
    // ‚úÖ 4. Verificar si ya se ejecut√≥
    const [results] = await sequelize.query(`
      SELECT name FROM "SequelizeMeta" WHERE name = $1
    `, {
      bind: [migrationName]
    });
    
    if (results.length > 0) {
      console.log(`‚ö†Ô∏è  [SKIP] La migraci√≥n ${migrationName} ya fue ejecutada previamente`);
      console.log('‚ÑπÔ∏è  [INFO] La tabla promotions ya deber√≠a existir en la base de datos');
      return;
    }
    
    // ‚úÖ 5. Ejecutar migraci√≥n
    console.log(`üîÑ [RUN] Ejecutando ${migrationName}...`);
    
    const migration = require(migrationPath);
    await migration.up(sequelize.getQueryInterface(), sequelize.constructor);
    
    // ‚úÖ 6. Marcar como ejecutada
    await sequelize.query(`
      INSERT INTO "SequelizeMeta" (name) VALUES ($1)
    `, {
      bind: [migrationName]
    });
    
    console.log(`‚úÖ [DONE] ${migrationName} completada exitosamente`);
    
    // ‚úÖ 7. Verificar estructura de la tabla
    const [tableInfo] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'promotions'
      ORDER BY ordinal_position
    `);
    
    console.log('üìä [INFO] Estructura de la tabla promotions:');
    console.table(tableInfo);
    
    // ‚úÖ 8. Verificar √≠ndice √∫nico
    const [indexes] = await sequelize.query(`
      SELECT indexname, indexdef 
      FROM pg_indexes 
      WHERE tablename = 'promotions'
    `);
    
    console.log('üîë [INFO] √çndices creados:');
    console.table(indexes);
    
    console.log('üéâ [SUCCESS] Tabla promotions lista para usar!');
    
  } catch (error) {
    console.error('‚ùå [ERROR] Error ejecutando migraci√≥n de promociones:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  } finally {
    await sequelize.close();
    console.log('üîê [DB] Conexi√≥n cerrada');
  }
}

// ‚úÖ Ejecutar
if (require.main === module) {
  runPromotionMigration();
}

module.exports = runPromotionMigration;
